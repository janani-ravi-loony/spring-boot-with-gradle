######################################## 
demo-14-SpringDataJPACustomOperations
########################################


########################################
###### Custom operations using derived query methods (v1)



# Start with the employee_starter (simplified )


########################################
######## Custom Queries

# Now add to the EmployeeRepository.java class

    List<Employee> findByName(String name);

    List<Employee> findByDepartment(String department);

    List<Employee> findBySalaryGreaterThan(int salary);

# Let us see what SQL is generated by Hibernate for this


# Update the application.properties file

spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=true

logging.level.org.hibernate.SQL=DEBUG


# Add this to Main.java

# Run one at a time and show

        System.out.println("*******Employees named Bob Williams");
        List<Employee> employeesNamedBob = employeeRepository.findByName("Bob Williams");
        employeesNamedBob.forEach(emp -> System.out.println(emp.toString()));

        System.out.println("*******Employees in IT");
        List<Employee> itEmployees = employeeRepository.findByDepartment("IT");
        itEmployees.forEach(emp -> System.out.println(emp.toString()));

        System.out.println("*******Employees with salary > 80000");
        List<Employee> higherSalaryEmployees = employeeRepository.findBySalaryGreaterThan(80000);
        higherSalaryEmployees.forEach(emp -> System.out.println(emp.toString()));


########################################
######## JPQL queries

# Note that we reference the table using the entity name "Employee" rather than the table name "employees"
# Note that we reference "department" using the variable in the entity rather than the database name

# EmployeeRepository.java

    @Query("SELECT e FROM Employee e WHERE e.name LIKE %:name%")
    List<Employee> findByNameContaining(@Param("name") String name);

    @Query("SELECT e FROM Employee e WHERE e.salary > :salary AND e.department = :department")
    List<Employee> findBySalaryAndDepartment(@Param("salary") int salary, @Param("department") String department);


# Main.java

        System.out.println("*******Employees with name containing Diana");
        List<Employee> dianaEmployees = employeeRepository.findByNameContaining("Diana");
        dianaEmployees.forEach(emp -> System.out.println(emp.toString()));

        System.out.println("*******Employees with IT salary above 50000");
        List<Employee> itHighSalaryEmployees = employeeRepository.findBySalaryAndDepartment(
                50000, "IT");
        itHighSalaryEmployees.forEach(emp -> System.out.println(emp.toString()));  

########################################
######## Custom operations to update employees

    @Transactional
    @Modifying
    @Query("UPDATE Employee e SET e.salary = :salary WHERE e.id = :id")
    int updateEmployeeSalaryById(@Param("id") Long id, @Param("salary") int salary);

    @Transactional
    @Modifying
    @Query("UPDATE Employee e SET e.department = :department WHERE e.name = :name")
    int updateEmployeeDepartmentByName(@Param("name") String name, @Param("department") String department);

    # Main.java

            // Updates
        System.out.println("********Updating salary of Alice Johnson");
        employeeRepository.updateEmployeeSalaryById(emp1.getId(), 75000);

        System.out.println("********Updating department of Bob Williams");
        employeeRepository.updateEmployeeDepartmentByName("Bob Williams", "Sales");



########################################
######## Native SQL Queries

# Is specific to the underlying database!

# EmployeeRepository.java

    @Query(value = "SELECT * FROM organization.employees WHERE department_name = :department", nativeQuery = true)
    List<Employee> findByDepartmentNative(@Param("department") String department);

    @Query(value = "SELECT * FROM organization.employees WHERE salary > :salary AND department_name = :department", nativeQuery = true)
    List<Employee> findBySalaryAndDepartmentNative(@Param("salary") int salary, @Param("department") String department);

# Main.java

        System.out.println("*******Employees in finance");
        List<Employee> financeEmployees = employeeRepository.findByDepartmentNative("Finance");
        financeEmployees.forEach(emp -> System.out.println(emp.toString()));


        System.out.println("*******Employees with salary > 80000 in IT");
        List<Employee> higherSalaryITEmployees = employeeRepository.findBySalaryAndDepartmentNative(
                80000, "IT");
        higherSalaryITEmployees.forEach(emp -> System.out.println(emp.toString()));













